'From Pharo3.0 of 18 March 2013 [Latest update: #30858] on 4 October 2014 at 8:57:14.451491 pm'!OTFRobot subclass: #WalkingBrushRobot	instanceVariableNames: 'battery state defaultPosition'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Robots'!!WalkingBrushRobot commentStamp: '<historical>' prior: 0!I am a robot and I am able to do simple things like move through a certain space, leaving marks of the paths I am doing. I have a battery that consumes itself according to my moves, and can be recharged at every moment.!!WalkingBrushRobot methodsFor: 'battery' stamp: 'NahuelGarbezza 12/9/2012 18:21'!battery: aBattery	battery := aBattery! !!WalkingBrushRobot methodsFor: 'battery' stamp: 'NahuelGarbezza 12/9/2012 18:21'!battery	^ battery! !!WalkingBrushRobot methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:24'!state: aState	state := aState! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 7/10/2014 15:33'!handleStep: aDistance	self state tracePositionFor: self.	self battery consume: aDistance! !!WalkingBrushRobot methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:23'!state	^ state! !!WalkingBrushRobot methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:36'!initialState	^BrushUp new! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 8/12/2014 16:05'!setBrushCommand: aBlock	self addCommand: (OTFCommand actionBlock: aBlock)! !!WalkingBrushRobot methodsFor: 'printing' stamp: 'IvanKarl 10/2/2014 14:37'!printOn: aStream  aStream    nextPutAll: 'Robot en ';    nextPutAll: self position printString;    nextPutAll: ', direccion ';    nextPutAll: self direction printString.! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'IvanKarl 10/2/2014 14:35'!southWest  self direction: 225! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!west	self direction: 270! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'IvanKarl 10/2/2014 14:53'!rotateRight: degrees  "Gira el robot x cant de grados hacia su derecha"  | partial_dir |  partial_dir := self direction + degrees.  partial_dir > 360    ifTrue: [ partial_dir := partial_dir - 360 ].  self direction: partial_dir! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!north	self direction: 0! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'IvanKarl 10/2/2014 14:35'!southEast  self direction: 135! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'ArturoZambrano 9/5/2014 20:45'!quarter self direction: self direction + 90.! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 8/25/2014 23:16'!direction: aDirection	"aDirection should be 0, 45, 90,  135, 180, 225, 270, 315"	(aDirection \\ 45 = 0 and: [ aDirection between: 0 and: 360 ])		ifTrue: [ self setDirection: aDirection ]! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!south	self direction: 180! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'IvanKarl 10/2/2014 14:35'!northEast  self direction: 45! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:44'!east	self direction: 90! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/8/2014 13:14'!direction	^ self directionMap keyAtValue: self heading! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'IvanKarl 10/2/2014 14:52'!rotateLeft: degrees  "Gira el robot x cant de grados hacia su izquierda"  | partial_dir |  partial_dir := self direction - degrees.  partial_dir < 0    ifTrue: [ partial_dir := partial_dir + 360 ].  self direction: partial_dir! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'IvanKarl 10/2/2014 14:35'!northWest  self direction: 315! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 14:50'!position: aPoint  "Posiciona al robot en la celda aPoint de la arena."  ^ self body position: aPoint! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 7/8/2014 15:14'!position	^ self body position! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:05'!dash: aNumber	"hace una linea punteada de longitud anumber"	aNumber // 2		timesRepeat: [ 			self				move: 1;				trace: 1				].	aNumber odd		ifTrue: [ self trace: 1 ]! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:34'!canDoPatrol: movements  ^self battery charge >= (movements * 4 + 5)! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:56'!defaultPosition  ^ defaultPosition! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:11'!rotatedSquareOfSize: aSize at: aPoint  "Realiza un cuadrado con una esquina en aPoint, de lado aSize, rotado 45 grados."  self    rotateRight: 45;    squareOfSize: aSize at: aPoint.! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:56'!defaultPosition: aPosition  defaultPosition  := aPosition ! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:44'!rectangleWithBase: aBase andHeight: aHeight  2 timesRepeat: [    self      move: aBase;      rotateRight: 90;      move: aHeight;      rotateRight: 90 ]! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:56'!resetPosition  self position: defaultPosition! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:06'!squareOfSize: aSize	"Realiza un cuadrado con una esquina en su posición actual y de lado aSize."	self brushDown.	4		timesRepeat: [ 			self				move: aSize;				rotateRight: 90 ].	self brushUp! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:08'!rotatedSquareOfSize: aSize  "Realiza un cuadrado con una esquina en su posición actual, de lado aSize,  rotado 45 grados."  self    rotateRight: 45;    squareOfSize: aSize.! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 7/10/2014 17:15'!move: aDistance	(self battery canConsume: aDistance)		ifTrue: [ self setStepsToGo: aDistance ]		ifFalse: [ EmptyBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:29'!trace: aDistance	"comment stating purpose of message"	aDistance		timesRepeat: [ 			self				brushDown;				brushUp;				move: 1 ]! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:07'!squareOfSize: aSize at: aPoint  "Realiza un cuadrado con una esquina en el punto aPoint y de lado aSize."  self    position: aPoint;    squareOfSize: aSize! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:34'!canDoRegularPatrol  ^self canDoPatrol: 10! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'IvanKarl 10/2/2014 15:08'!squareAtHomeOfSize: aSize  "Realiza un cuadrado con una esquina en 25@25 y de lado aSize."  self squareOfSize: aSize at: (25@25)! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 9/3/2014 12:03'!moveTres  self move:3.! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 9/3/2014 11:59'!moveDos   self move:2.! !!WalkingBrushRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/12/2014 13:40'!initialize	super initialize.		self state: self initialState.	self headingFromDirection: 0.	^ self! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isBrushDown	^self state isDown! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'federicobalaguer 8/25/2014 16:23'!brushUp	self setBrushCommand: [ self state brushUpFor: self ]! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isBrushUp	^self state isUp! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'federicobalaguer 8/25/2014 16:23'!brushDown	self setBrushCommand: [ self state brushDownFor: self ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WalkingBrushRobot class	instanceVariableNames: ''!!WalkingBrushRobot class commentStamp: '<historical>' prior: 0!!!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 19:37'!withBattery	^ self new		battery: Battery fullyCharged ;		yourself! !!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 19:37'!newWithPosition: aPosition	^ self new		position: aPosition;		battery: Battery fullyCharged;		yourself! !!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 15:00'!withoutBattery	^ self new		battery: EndlessBattery new;		yourself! !