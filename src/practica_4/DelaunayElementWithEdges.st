'From Pharo3.0 of 18 March 2013 [Latest update: #30858] on 31 October 2014 at 11:11:37.120301 am'!Object subclass: #DelaunayElement	instanceVariableNames: 'vertices edges'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena'!!DelaunayElement commentStamp: 'IvanKarl 10/24/2014 11:41' prior: 0!A DelaunayElement is Triangle yo.Instance Variables	vertex1:		<Object>	vertex2:		<Object>	vertex3:		<Object>vertex1	- xxxxxvertex2	- xxxxxvertex3	- xxxxx!!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:50'!vertex3	^ vertices at: 3! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:51'!vertex1: aVertex	vertices at: 1 put: aVertex.! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:48'!vertices: aCollection	vertices := aCollection.! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:49'!vertex1	^ vertices at: 1! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:50'!vertex3: aVertex	vertices at: 3 put: aVertex.! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:51'!vertex2: aVertex	vertices at: 2 put: aVertex.! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:51'!vertex2	^ vertices at: 2! !!DelaunayElement methodsFor: 'acccessing' stamp: 'IvanKarl 10/24/2014 11:56'!vertices	^ vertices! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 23:12'!perimeter	^ (self edge1) + (self edge2 ) + (self edge3 )! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/27/2014 20:55'!sameAs: aTriangle	"retorna true si dos triangulos son iguales"	^(self comun: aTriangle)  = 0.! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/27/2014 20:43'!isVertex: aPoint 	^self vertices includes: aPoint. ! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 23:12'!area	| s |	s := self perimeter / 2.	^ (s * (s - self edge1) * (s - self edge2) * (s - self edge3)) sqrt! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 21:35'!initialize	vertices := OrderedCollection new. 	edges := OrderedCollection new.! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/27/2014 20:54'!shareSide: aTriangle	"retorna si dos triangulos comparten un lado"	^(self comun:aTriangle) <= 1.	! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/27/2014 20:55'!isNeighborElement:aTriangle"retorna true si son triangulos vecinos: no son el mismo y comparten un lado"^(self comun: aTriangle)  = 1.! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 21:56'!edges	^ edges! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 23:13'!edge3	^ (self edges at: 3) distance.! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 23:16'!edge2	^ (self edges at: 2) distance.! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 23:13'!edge1	^ (self edges at: 1) distance! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/27/2014 20:46'!comun: aTriangle	"calcula cantidad de lados en comun"	^ (self vertices reject: [ :vertex | aTriangle vertices includes: vertex ]) size.! !!DelaunayElement methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 22:28'!createEdgesFrom: anOrderedCollection	| index |	index := 1.	anOrderedCollection		do: [ :point | 			self edges add: (			Edge points: (OrderedCollection with: point with: 				(anOrderedCollection at: 					(index \\ anOrderedCollection size) + 1)			)).			index := index + 1 ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DelaunayElement class	instanceVariableNames: ''!!DelaunayElement class commentStamp: '<historical>' prior: 0!!!DelaunayElement class methodsFor: 'as yet unclassified' stamp: 'IvanKarl 10/30/2014 22:18'!withPoints: aCollection	^ self new		vertices: aCollection asSortedCollection;		createEdgesFrom: aCollection;		yourself! !